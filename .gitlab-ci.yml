stages:
  - build
  - release
#lint-gofiles:
#  stage: build
#  image: golang:1.19.1-alpine3.16
#  script:
#    - go get -u golang.org/x/lint/golint
#    - golint ./...
build:
  stage: build
  image: golang:1.19.1-alpine3.16
  script:
    - export GIT_LATEST_TAG=$(git fetch --depth 100 >/dev/null && git describe --abbrev=0 --tags)
    - CGO_ENABLED=0 go build -o otc -ldflags "-X "otc/docopt.ReleaseManagerVersion=$GIT_LATEST_TAG"" .
    - CGO_ENABLED=0 go test ./...
  artifacts:
    paths:
      - otc
    expire_in: 1 week

executable-files:
  stage: release
  image: golang:1.19.1-alpine3.16
  artifacts:
    name: "otc"
    paths:
      - linux-amd64/*
      - darwin-amd64/*
      - windows-amd64/*
    expire_in: never
  only:
    - tags
  script:
    - export GIT_LATEST_TAG=$(git fetch --depth 100 >/dev/null && git describe --abbrev=0 --tags)
    - export GOOS="linux" && export GOARCH="amd64"
    - env GOOS=$GOOS GOARCH=$GOARCH go build -o $GOOS-$GOARCH/otc -ldflags "-X "otc/docopt.ReleaseManagerVersion=$GIT_LATEST_TAG"" .
    - export GOOS="darwin" && export GOARCH="amd64"
    - env GOOS=$GOOS GOARCH=$GOARCH go build -o $GOOS-$GOARCH/otc -ldflags "-X "otc/docopt.ReleaseManagerVersion=$GIT_LATEST_TAG"" .
    - export GOOS="windows" && export GOARCH="amd64"
    - env GOOS=$GOOS GOARCH=$GOARCH go build -o $GOOS-$GOARCH/otc.exe -ldflags "-X "otc/docopt.ReleaseManagerVersion=$GIT_LATEST_TAG"" .

docker:
  stage: release
  image: "iits/cosign:1.0.0"
  cache: {}
  only:
    - tags
  dependencies:
    - build
  services:
    - docker:18-dind
  script:
    - |
      cat <<EOT>> Dockerfile
      FROM alpine:3.16.0
      RUN mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
      COPY ./otc /usr/local/bin
      ENTRYPOINT ["otc"]
      EOT

    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - echo $DOCKERHUB_IITS_ACCESS_TOKEN | docker login -u iits --password-stdin
    - GIT_LATEST_TAG=$(git fetch --depth 100 && git describe --abbrev=0 --tags)
    - docker build --label GIT_LATEST_TAG=${GIT_LATEST_TAG} --label CI_COMMIT_SHA=${CI_COMMIT_SHA} -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH} .
    - docker push -a ${CI_REGISTRY_IMAGE}
    - echo -e "$COSIGN_PRIVATE_KEY" > cosign.key
    - cosign sign --key cosign.key ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

before_script:
  - echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin || true